diagnosticFeatures(dataTable)

function [featureTable,outputTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes spectra:
%  linAcc_yTT_ps/SpectrumData
%  linAcc_zTT_ps/SpectrumData
%
% This function computes features:
%  linAcc_yTT_ps_spec/PeakAmp1
%  linAcc_yTT_ps_spec/PeakAmp2
%  linAcc_yTT_ps_spec/PeakAmp3
%  linAcc_yTT_ps_spec/PeakFreq1
%  linAcc_yTT_ps_spec/PeakFreq2
%  linAcc_yTT_ps_spec/PeakFreq3
%  linAcc_yTT_ps_spec/BandPower
%  linAcc_yTT_sigstats/ClearanceFactor
%  linAcc_yTT_sigstats/CrestFactor
%  linAcc_yTT_sigstats/ImpulseFactor
%  linAcc_yTT_sigstats/Kurtosis
%  linAcc_yTT_sigstats/Mean
%  linAcc_yTT_sigstats/PeakValue
%  linAcc_yTT_sigstats/RMS
%  linAcc_yTT_sigstats/ShapeFactor
%  linAcc_yTT_sigstats/Skewness
%  linAcc_yTT_sigstats/Std
%  linAcc_zTT_ps_spec/PeakAmp1
%  linAcc_zTT_ps_spec/PeakAmp2
%  linAcc_zTT_ps_spec/PeakAmp3
%  linAcc_zTT_ps_spec/PeakFreq1
%  linAcc_zTT_ps_spec/PeakFreq2
%  linAcc_zTT_ps_spec/PeakFreq3
%  linAcc_zTT_ps_spec/BandPower
%  linAcc_zTT_sigstats/ClearanceFactor
%  linAcc_zTT_sigstats/CrestFactor
%  linAcc_zTT_sigstats/ImpulseFactor
%  linAcc_zTT_sigstats/Kurtosis
%  linAcc_zTT_sigstats/Mean
%  linAcc_zTT_sigstats/PeakValue
%  linAcc_zTT_sigstats/RMS
%  linAcc_zTT_sigstats/ShapeFactor
%  linAcc_zTT_sigstats/Skewness
%  linAcc_zTT_sigstats/Std

%
% Frame Policy:
%  Frame name: FRM_1
%  Frame size: 2.56 seconds
%  Frame rate: 2.56 seconds
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 15-Apr-2023 10:58:43

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',["linAcc_xTT";"linAcc_yTT";"linAcc_zTT";"angVel_xTT";"angVel_yTT";"angVel_zTT";"errVel_xTT";"errVel_yTT";"errVel_zTT";"altitudeTT";"latitudeTT";"longitudeTT";"err_roll_TT";"err_airspeed_TT";"aspd_error_TT";"alt_error_TT";"err_yaw_TT";"err_pitch_TT"],'ConditionVariables',"FaultLabel");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new frame policy name to DataVariables.
outputEnsemble.DataVariables = [outputEnsemble.DataVariables;"FRM_1"];

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = ["linAcc_yTT","linAcc_zTT"];

% Loop through all ensemble members to read and write data.
while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Read signals.
    linAcc_yTT_full = readMemberData(member,"linAcc_yTT",["Time","Var1"]);
    linAcc_zTT_full = readMemberData(member,"linAcc_zTT",["Time","Var1"]);

    % Get the frame intervals.
    lowerBound = min([linAcc_yTT_full.Time(1),linAcc_zTT_full.Time(1)]);
    upperBound = max([linAcc_yTT_full.Time(end),linAcc_zTT_full.Time(end)]);
    fullIntervals = frameintervals([lowerBound upperBound],2.56,2.56,'FrameUnit',"seconds");
    intervals = fullIntervals;

    % Initialize a table to store frame results.
    frames = table;

    % Loop through all frame intervals and compute results.
    for ct = 1:height(intervals)
        % Get all input variables.
        linAcc_yTT = linAcc_yTT_full(linAcc_yTT_full.Time>=intervals{ct,1}&linAcc_yTT_full.Time<intervals{ct,2},:);
        linAcc_zTT = linAcc_zTT_full(linAcc_zTT_full.Time>=intervals{ct,1}&linAcc_zTT_full.Time<intervals{ct,2},:);

        % Initialize a table to store results for one frame interval.
        frame = intervals(ct,:);

        %% PowerSpectrum
        try
            % Get units to use in computed spectrum.
            tuReal = "seconds";
            tuTime = tuReal;

            % Compute effective sampling rate.
            tNumeric = time2num(linAcc_yTT.Time,tuReal);
            [Fs,irregular] = effectivefs(tNumeric);
            Ts = 1/Fs;

            % Resample non-uniform signals.
            x = linAcc_yTT.Var1;
            if irregular
                x = resample(x,tNumeric,Fs,'linear');
            end

            % Compute the autoregressive model.
            data = iddata(x,[],Ts,'TimeUnit',tuTime,'OutputName','SpectrumData');
            arOpt = arOptions('Approach','ls','Window','pow','EstimateCovariance',false);
            model = ar(data,13,arOpt);

            % Compute the power spectrum.
            f = linspace(0,12.5,1000);
            f = f*funitconv('Hz','cycles/TimeUnit','seconds');
            [ps,w] = spectrum(model,2*pi*f);
            ps = reshape(ps, numel(ps), 1);

            % Convert frequency unit.
            factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
            w = factor*w;
            Fs = 2*pi*factor*Fs;

            % Remove frequencies above Nyquist frequency.
            I = w<=(Fs/2+1e4*eps);
            w = w(I);
            ps = ps(I);

            % Configure the computed spectrum.
            ps = table(w, ps, 'VariableNames', ["Frequency", "SpectrumData"]);
            ps.Properties.VariableUnits = ["Hz", ""];
            ps = addprop(ps, {'SampleFrequency'}, {'table'});
            ps.Properties.CustomProperties.SampleFrequency = Fs;
            linAcc_yTT_ps = ps;
        catch
            linAcc_yTT_ps = table(NaN, NaN, 'VariableNames', ["Frequency", "SpectrumData"]);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({linAcc_yTT_ps},'VariableNames',"linAcc_yTT_ps")];

        %% SpectrumFeatures
        try
            % Compute spectral features.
            % Get frequency unit conversion factor.
            factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
            ps = linAcc_yTT_ps.SpectrumData;
            w = linAcc_yTT_ps.Frequency;
            w = factor*w;
            mask_1 = (w>=factor*0.2) & (w<=factor*7.5);
            ps = ps(mask_1);
            w = w(mask_1);

            % Compute spectral peaks.
            [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
                'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',3);
            peakAmp = [peakAmp(:); NaN(3-numel(peakAmp),1)];
            peakFreq = [peakFreq(:); NaN(3-numel(peakFreq),1)];

            % Extract individual feature values.
            PeakAmp1 = peakAmp(1);
            PeakAmp2 = peakAmp(2);
            PeakAmp3 = peakAmp(3);
            PeakFreq1 = peakFreq(1);
            PeakFreq2 = peakFreq(2);
            PeakFreq3 = peakFreq(3);
            BandPower = trapz(w/factor,ps);

            % Concatenate signal features.
            featureValues = [PeakAmp1,PeakAmp2,PeakAmp3,PeakFreq1,PeakFreq2,PeakFreq3,BandPower];

            % Package computed features into a table.
            featureNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
            linAcc_yTT_ps_spec = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,7);
            featureNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
            linAcc_yTT_ps_spec = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({linAcc_yTT_ps_spec},'VariableNames',"linAcc_yTT_ps_spec")];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = linAcc_yTT.Var1;
            ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
            CrestFactor = peak2rms(inputSignal);
            ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
            Kurtosis = kurtosis(inputSignal);
            Mean = mean(inputSignal,'omitnan');
            PeakValue = max(abs(inputSignal));
            RMS = rms(inputSignal,'omitnan');
            ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
            Skewness = skewness(inputSignal);
            Std = std(inputSignal,'omitnan');

            % Concatenate signal features.
            featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,ShapeFactor,Skewness,Std];

            % Package computed features into a table.
            featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
            linAcc_yTT_sigstats = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,10);
            featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
            linAcc_yTT_sigstats = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({linAcc_yTT_sigstats},'VariableNames',"linAcc_yTT_sigstats")];

        %% PowerSpectrum
        try
            % Get units to use in computed spectrum.
            tuReal = "seconds";
            tuTime = tuReal;

            % Compute effective sampling rate.
            tNumeric = time2num(linAcc_zTT.Time,tuReal);
            [Fs,irregular] = effectivefs(tNumeric);
            Ts = 1/Fs;

            % Resample non-uniform signals.
            x = linAcc_zTT.Var1;
            if irregular
                x = resample(x,tNumeric,Fs,'linear');
            end

            % Compute the autoregressive model.
            data = iddata(x,[],Ts,'TimeUnit',tuTime,'OutputName','SpectrumData');
            arOpt = arOptions('Approach','ls','Window','pow','EstimateCovariance',false);
            model = ar(data,13,arOpt);

            % Compute the power spectrum.
            f = linspace(0,12.5,1000);
            f = f*funitconv('Hz','cycles/TimeUnit','seconds');
            [ps,w] = spectrum(model,2*pi*f);
            ps = reshape(ps, numel(ps), 1);

            % Convert frequency unit.
            factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
            w = factor*w;
            Fs = 2*pi*factor*Fs;

            % Remove frequencies above Nyquist frequency.
            I = w<=(Fs/2+1e4*eps);
            w = w(I);
            ps = ps(I);

            % Configure the computed spectrum.
            ps = table(w, ps, 'VariableNames', ["Frequency", "SpectrumData"]);
            ps.Properties.VariableUnits = ["Hz", ""];
            ps = addprop(ps, {'SampleFrequency'}, {'table'});
            ps.Properties.CustomProperties.SampleFrequency = Fs;
            linAcc_zTT_ps = ps;
        catch
            linAcc_zTT_ps = table(NaN, NaN, 'VariableNames', ["Frequency", "SpectrumData"]);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({linAcc_zTT_ps},'VariableNames',"linAcc_zTT_ps")];

        %% SpectrumFeatures
        try
            % Compute spectral features.
            % Get frequency unit conversion factor.
            factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
            ps = linAcc_zTT_ps.SpectrumData;
            w = linAcc_zTT_ps.Frequency;
            w = factor*w;
            mask_1 = (w>=factor*0.2) & (w<=factor*7.5);
            ps = ps(mask_1);
            w = w(mask_1);

            % Compute spectral peaks.
            [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
                'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',3);
            peakAmp = [peakAmp(:); NaN(3-numel(peakAmp),1)];
            peakFreq = [peakFreq(:); NaN(3-numel(peakFreq),1)];

            % Extract individual feature values.
            PeakAmp1 = peakAmp(1);
            PeakAmp2 = peakAmp(2);
            PeakAmp3 = peakAmp(3);
            PeakFreq1 = peakFreq(1);
            PeakFreq2 = peakFreq(2);
            PeakFreq3 = peakFreq(3);
            BandPower = trapz(w/factor,ps);

            % Concatenate signal features.
            featureValues = [PeakAmp1,PeakAmp2,PeakAmp3,PeakFreq1,PeakFreq2,PeakFreq3,BandPower];

            % Package computed features into a table.
            featureNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
            linAcc_zTT_ps_spec = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,7);
            featureNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
            linAcc_zTT_ps_spec = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({linAcc_zTT_ps_spec},'VariableNames',"linAcc_zTT_ps_spec")];

        %% SignalFeatures
        try
            % Compute signal features.
            inputSignal = linAcc_zTT.Var1;
            ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
            CrestFactor = peak2rms(inputSignal);
            ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
            Kurtosis = kurtosis(inputSignal);
            Mean = mean(inputSignal,'omitnan');
            PeakValue = max(abs(inputSignal));
            RMS = rms(inputSignal,'omitnan');
            ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
            Skewness = skewness(inputSignal);
            Std = std(inputSignal,'omitnan');

            % Concatenate signal features.
            featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,ShapeFactor,Skewness,Std];

            % Package computed features into a table.
            featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
            linAcc_zTT_sigstats = array2table(featureValues,'VariableNames',featureNames);
        catch
            % Package computed features into a table.
            featureValues = NaN(1,10);
            featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
            linAcc_zTT_sigstats = array2table(featureValues,'VariableNames',featureNames);
        end

        % Append computed results to the frame table.
        frame = [frame, ...
            table({linAcc_zTT_sigstats},'VariableNames',"linAcc_zTT_sigstats")];

        %% Concatenate frames.
        frames = [frames;frame]; %#ok<*AGROW>
    end

    % Write all the results for the current member to the ensemble.
    memberResult = table({frames},'VariableNames',"FRM_1");
    writeToLastMemberRead(outputEnsemble,memberResult)
end

% Gather all features into a table.
selectedFeatureNames = ["FRM_1/linAcc_yTT_ps_spec/PeakAmp1","FRM_1/linAcc_yTT_ps_spec/PeakAmp2","FRM_1/linAcc_yTT_ps_spec/PeakAmp3","FRM_1/linAcc_yTT_ps_spec/PeakFreq1","FRM_1/linAcc_yTT_ps_spec/PeakFreq2","FRM_1/linAcc_yTT_ps_spec/PeakFreq3","FRM_1/linAcc_yTT_ps_spec/BandPower","FRM_1/linAcc_yTT_sigstats/ClearanceFactor","FRM_1/linAcc_yTT_sigstats/CrestFactor","FRM_1/linAcc_yTT_sigstats/ImpulseFactor","FRM_1/linAcc_yTT_sigstats/Kurtosis","FRM_1/linAcc_yTT_sigstats/Mean","FRM_1/linAcc_yTT_sigstats/PeakValue","FRM_1/linAcc_yTT_sigstats/RMS","FRM_1/linAcc_yTT_sigstats/ShapeFactor","FRM_1/linAcc_yTT_sigstats/Skewness","FRM_1/linAcc_yTT_sigstats/Std","FRM_1/linAcc_zTT_ps_spec/PeakAmp1","FRM_1/linAcc_zTT_ps_spec/PeakAmp2","FRM_1/linAcc_zTT_ps_spec/PeakAmp3","FRM_1/linAcc_zTT_ps_spec/PeakFreq1","FRM_1/linAcc_zTT_ps_spec/PeakFreq2","FRM_1/linAcc_zTT_ps_spec/PeakFreq3","FRM_1/linAcc_zTT_ps_spec/BandPower","FRM_1/linAcc_zTT_sigstats/ClearanceFactor","FRM_1/linAcc_zTT_sigstats/CrestFactor","FRM_1/linAcc_zTT_sigstats/ImpulseFactor","FRM_1/linAcc_zTT_sigstats/Kurtosis","FRM_1/linAcc_zTT_sigstats/Mean","FRM_1/linAcc_zTT_sigstats/PeakValue","FRM_1/linAcc_zTT_sigstats/RMS","FRM_1/linAcc_zTT_sigstats/ShapeFactor","FRM_1/linAcc_zTT_sigstats/Skewness","FRM_1/linAcc_zTT_sigstats/Std"];
featureTable = readFeatureTable(outputEnsemble,"FRM_1",'Features',selectedFeatureNames,'ConditionVariables',outputEnsemble.ConditionVariables,'IncludeMemberID',true);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
outputTable = readall(outputEnsemble);
end
