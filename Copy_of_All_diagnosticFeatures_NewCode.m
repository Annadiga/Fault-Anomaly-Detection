diagnosticFeatures(dataTable)

function [featureTable,outputTable] = diagnosticFeatures(inputData)
%DIAGNOSTICFEATURES recreates results in Diagnostic Feature Designer.
%
% Input:
%  inputData: A table or a cell array of tables/matrices containing the
%  data as those imported into the app.
%
% Output:
%  featureTable: A table containing all features and condition variables.
%  outputTable: A table containing the computation results.
%
% This function computes spectra:
%  linAcc_yTT_ps/SpectrumData
%  linAcc_zTT_ps/SpectrumData
%
% This function computes features:
%  linAcc_yTT_ps_spec/PeakAmp1
%  linAcc_yTT_ps_spec/PeakAmp2
%  linAcc_yTT_ps_spec/PeakAmp3
%  linAcc_yTT_ps_spec/PeakFreq1
%  linAcc_yTT_ps_spec/PeakFreq2
%  linAcc_yTT_ps_spec/PeakFreq3
%  linAcc_yTT_ps_spec/BandPower
%  linAcc_yTT_sigstats/ClearanceFactor
%  linAcc_yTT_sigstats/CrestFactor
%  linAcc_yTT_sigstats/ImpulseFactor
%  linAcc_yTT_sigstats/Kurtosis
%  linAcc_yTT_sigstats/Mean
%  linAcc_yTT_sigstats/PeakValue
%  linAcc_yTT_sigstats/RMS
%  linAcc_yTT_sigstats/ShapeFactor
%  linAcc_yTT_sigstats/Skewness
%  linAcc_yTT_sigstats/Std
%  linAcc_zTT_ps_spec/PeakAmp1
%  linAcc_zTT_ps_spec/PeakAmp2
%  linAcc_zTT_ps_spec/PeakAmp3
%  linAcc_zTT_ps_spec/PeakFreq1
%  linAcc_zTT_ps_spec/PeakFreq2
%  linAcc_zTT_ps_spec/PeakFreq3
%  linAcc_zTT_ps_spec/BandPower
%  linAcc_zTT_sigstats/ClearanceFactor
%  linAcc_zTT_sigstats/CrestFactor
%  linAcc_zTT_sigstats/ImpulseFactor
%  linAcc_zTT_sigstats/Kurtosis
%  linAcc_zTT_sigstats/Mean
%  linAcc_zTT_sigstats/PeakValue
%  linAcc_zTT_sigstats/RMS
%  linAcc_zTT_sigstats/ShapeFactor
%  linAcc_zTT_sigstats/Skewness
%  linAcc_zTT_sigstats/Std

%
% Frame Policy:
%  Frame name: FRM_1
%  Frame size: 2.56 seconds
%  Frame rate: 2.56 seconds
%
% Organization of the function:
% 1. Compute signals/spectra/features
% 2. Extract computed features into a table
%
% Modify the function to add or remove data processing, feature generation
% or ranking operations.

% Auto-generated by MATLAB on 15-Apr-2023 10:58:43

feature_vector = ["linAcc_xTT";"linAcc_yTT";"linAcc_zTT";"angVel_xTT";"angVel_yTT";"angVel_zTT";"errVel_xTT";"errVel_yTT";"errVel_zTT";"altitudeTT";"latitudeTT";"longitudeTT";"err_roll_TT";"err_airspeed_TT";"aspd_error_TT";"alt_error_TT";"err_yaw_TT";"err_pitch_TT"];

% Create output ensemble.
outputEnsemble = workspaceEnsemble(inputData,'DataVariables',feature_vector,'ConditionVariables',"FaultLabel");

% Reset the ensemble to read from the beginning of the ensemble.
reset(outputEnsemble);

% Append new frame policy name to DataVariables.
outputEnsemble.DataVariables = [outputEnsemble.DataVariables;"FRM_1"];

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = feature_vector;

% Loop through all ensemble members to read and write data.

while hasdata(outputEnsemble)
    % Read one member.
    member = read(outputEnsemble);

    % Read signals.
   
    list_time_1 = [];
    list_time_end = [];
    % for feature in feature vector
    
    for i = 1:length(feature_vector)
        % access the i-th element of the vector and print it to the console feature_vector(i)
        
        % Generate a dynamic variable name based on the feature
        var_name = feature_vector(i);
        var_name = sprintf('%s', var_name);
        var_name_full = sprintf('%s_full', var_name);
       
        % Assign the data to the variable with the dynamic variable name
        % linAcc_xTT_full = readMemberData(member,"linAcc_xTT",["Time","Var1"]);
        eval(sprintf('%s = readMemberData(member, var_name ,["Time","Var1"]);', var_name_full));
        
        % save in list
        list_time_1 = [list_time_1, eval([var_name_full '.Time(1)'])];
        list_time_end = [list_time_end, eval([var_name_full '.Time(end)'])];

    end
    % Get the frame intervals.
    lowerBound = min(list_time_1);
    upperBound = max(list_time_end);
    fullIntervals = frameintervals([lowerBound upperBound],2.56,2.56,'FrameUnit',"seconds");
    intervals = fullIntervals;

    % Initialize a table to store frame results.
    frames = table;

    % Loop through all frame intervals and compute results.
  
    for ct = 1:height(intervals)

        % Initialize a table to store results for one frame interval.
        
        frame = intervals(ct,:);

         for i = 1:length(feature_vector)
            % Generate a dynamic variable name based on the feature
            var_name = feature_vector(i);
            var_name = sprintf('%s', var_name);
            var_name_full = sprintf('%s_full', var_name);
     
           
            % Assign the data to the variable with the dynamic variable name
            % linAcc_xTT = linAcc_xTT_full(linAcc_xTT_full.Time>=intervals{ct,1}&linAcc_xTT_full.Time<intervals{ct,2},:);
            array_full_time = eval([var_name_full '.Time' ]);
            feature_table = eval(var_name_full);
            eval(sprintf("%s = feature_table((array_full_time  >=intervals{ct,1})&(array_full_time<intervals{ct,2}),:);", var_name));  

            

            %% PowerSpectrum
            try
                % Get units to use in computed spectrum.
                tuReal = "seconds";
                tuTime = tuReal;   
    
                % Compute effective sampling rate.
                array_time = eval([var_name '.Time' ]);
                tNumeric = time2num(array_time,tuReal);
                [Fs,irregular] = effectivefs(tNumeric);
                Ts = 1/Fs;

                % Resample non-uniform signals.   
                x = eval([var_name '.Var1' ]);
                if irregular
                    x = resample(x,tNumeric,Fs,'linear');
                end

                % Compute the autoregressive model.
                data = iddata(x,[],Ts,'TimeUnit',tuTime,'OutputName','SpectrumData');
                arOpt = arOptions('Approach','ls','Window','pow','EstimateCovariance',false);
                model = ar(data,13,arOpt);
    
                % Compute the power spectrum.
                f = linspace(0,12.5,1000);
                f = f*funitconv('Hz','cycles/TimeUnit','seconds');
                [ps,w] = spectrum(model,2*pi*f);
                ps = reshape(ps, numel(ps), 1);
    
                % Convert frequency unit.
                factor = funitconv('rad/TimeUnit', 'Hz', 'seconds');
                w = factor*w;
                Fs = 2*pi*factor*Fs;
    
                % Remove frequencies above Nyquist frequency.
                I = w<=(Fs/2+1e4*eps);
                w = w(I);
                ps = ps(I);
    
                % Configure the computed spectrum.
                ps = table(w, ps, 'VariableNames', ["Frequency", "SpectrumData"]);
                ps.Properties.VariableUnits = ["Hz", ""];
                ps = addprop(ps, {'SampleFrequency'}, {'table'});
                ps.Properties.CustomProperties.SampleFrequency = Fs;

                %linAcc_yTT_ps = ps;
                var_name_ps = sprintf('%s_ps', var_name);
                eval(sprintf("%s = ps;", var_name_ps));  

            catch
                var_name_ps = sprintf('%s_ps', var_name);
                eval(sprintf("%s = table(NaN, NaN, 'VariableNames', ['Frequency', 'SpectrumData']);", var_name_ps));  
            end
    
            % Append computed results to the frame table.
           
            %table_var_name_ps = eval(var_name_ps);
            
            frame = [frame, ...
                table({eval(var_name_ps)},'VariableNames',{var_name_ps})];

            %% SpectrumFeatures
            try
                % Compute spectral features.
                % Get frequency unit conversion factor.
                factor = funitconv('Hz', 'rad/TimeUnit', 'seconds');
                ps = eval([var_name_ps '.SpectrumData']);
                % w = linAcc_yTT_ps.Frequency;
                w = eval([var_name_ps '.Frequency']);
                w = factor*w;
                mask_1 = (w>=factor*0.2) & (w<=factor*7.5);
                ps = ps(mask_1);
                w = w(mask_1);
    
                % Compute spectral peaks.
                [peakAmp,peakFreq] = findpeaks(ps,w/factor,'MinPeakHeight',-Inf, ...
                    'MinPeakProminence',0,'MinPeakDistance',0.001,'SortStr','descend','NPeaks',3);
                peakAmp = [peakAmp(:); NaN(3-numel(peakAmp),1)];
                peakFreq = [peakFreq(:); NaN(3-numel(peakFreq),1)];
    
                % Extract individual feature values.
                PeakAmp1 = peakAmp(1);
                PeakAmp2 = peakAmp(2);
                PeakAmp3 = peakAmp(3);
                PeakFreq1 = peakFreq(1);
                PeakFreq2 = peakFreq(2);
                PeakFreq3 = peakFreq(3);
                BandPower = trapz(w/factor,ps);
    
                % Concatenate signal features.
                featureValues = [PeakAmp1,PeakAmp2,PeakAmp3,PeakFreq1,PeakFreq2,PeakFreq3,BandPower];
    
                % Package computed features into a table.
                featureNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
 
                % linAcc_yTT_ps_spec = array2table(featureValues,'VariableNames',featureNames);
                var_name_ps_spec = sprintf('%s_ps_spec', var_name);
                eval(sprintf("%s = array2table(featureValues,'VariableNames',featureNames);", var_name_ps_spec));  

            catch
                % Package computed features into a table.
                featureValues = NaN(1,7);
                featureNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
                %linAcc_yTT_ps_spec = array2table(featureValues,'VariableNames',featureNames);
                var_name_ps_spec = sprintf('%s_ps_spec', var_name);
                eval(sprintf("%s = array2table(featureValues,'VariableNames',featureNames);", var_name_ps_spec));
            end
            
            
            % Append computed results to the frame table.      
            frame = [frame, ...
                table({eval(var_name_ps_spec)},'VariableNames',{var_name_ps_spec})];

            %% SignalFeatures
            try
                % Compute signal features.
                inputSignal = eval([var_name '.Var1']);
                ClearanceFactor = max(abs(inputSignal))/(mean(sqrt(abs(inputSignal)))^2);
                CrestFactor = peak2rms(inputSignal);
                ImpulseFactor = max(abs(inputSignal))/mean(abs(inputSignal));
                Kurtosis = kurtosis(inputSignal);
                Mean = mean(inputSignal,'omitnan');
                PeakValue = max(abs(inputSignal));
                RMS = rms(inputSignal,'omitnan');
                ShapeFactor = rms(inputSignal,'omitnan')/mean(abs(inputSignal),'omitnan');
                Skewness = skewness(inputSignal);
                Std = std(inputSignal,'omitnan');
    
                % Concatenate signal features.
                featureValues = [ClearanceFactor,CrestFactor,ImpulseFactor,Kurtosis,Mean,PeakValue,RMS,ShapeFactor,Skewness,Std];
                
               
                % Package computed features into a table.
                featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
                var_name_sigstats = sprintf('%s_sigstats', var_name);
                eval(sprintf("%s = array2table(featureValues,'VariableNames',featureNames);", var_name_sigstats));  
               
            catch
                % Package computed features into a table.
                featureValues = NaN(1,10);
                featureNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
                
                var_name_sigstats = sprintf('%s_sigstats', var_name);
                eval(sprintf("%s = array2table(featureValues,'VariableNames',featureNames);", var_name_sigstats));  
               
            end
            
            % Append computed results to the frame table.
            frame = [frame, ...
                table({eval(var_name_sigstats)},'VariableNames',{var_name_sigstats})];            
        end       

        %% Concatenate frames.
        frames = [frames;frame]; %#ok<*AGROW>
    end

    % Write all the results for the current member to the ensemble.
    memberResult = table({frames},'VariableNames',"FRM_1");
    writeToLastMemberRead(outputEnsemble,memberResult)
end


featureSpecNames = ["PeakAmp1","PeakAmp2","PeakAmp3","PeakFreq1","PeakFreq2","PeakFreq3","BandPower"];
featureSignNames = ["ClearanceFactor","CrestFactor","ImpulseFactor","Kurtosis","Mean","PeakValue","RMS","ShapeFactor","Skewness","Std"];
selectedFeatureNames = [];
for f = 1:length(feature_vector)
   
    for g = 1:length(featureSpecNames)
       selectedFeatureNames = [selectedFeatureNames, strcat('FRM_1/',feature_vector(f),'_ps_spec/',featureSpecNames(g))];
    end

    for h = 1:length(featureSignNames)
       selectedFeatureNames = [selectedFeatureNames, strcat('FRM_1/',feature_vector(f),'_sigstats/',featureSignNames(h))];
    end
end
% Gather all features into a table.
%selectedFeatureNamesOLD = ["FRM_1/linAcc_yTT_ps_spec/PeakAmp1","FRM_1/linAcc_yTT_ps_spec/PeakAmp2","FRM_1/linAcc_yTT_ps_spec/PeakAmp3","FRM_1/linAcc_yTT_ps_spec/PeakFreq1","FRM_1/linAcc_yTT_ps_spec/PeakFreq2","FRM_1/linAcc_yTT_ps_spec/PeakFreq3","FRM_1/linAcc_yTT_ps_spec/BandPower","FRM_1/linAcc_yTT_sigstats/ClearanceFactor","FRM_1/linAcc_yTT_sigstats/CrestFactor","FRM_1/linAcc_yTT_sigstats/ImpulseFactor","FRM_1/linAcc_yTT_sigstats/Kurtosis","FRM_1/linAcc_yTT_sigstats/Mean","FRM_1/linAcc_yTT_sigstats/PeakValue","FRM_1/linAcc_yTT_sigstats/RMS","FRM_1/linAcc_yTT_sigstats/ShapeFactor","FRM_1/linAcc_yTT_sigstats/Skewness","FRM_1/linAcc_yTT_sigstats/Std","FRM_1/linAcc_zTT_ps_spec/PeakAmp1","FRM_1/linAcc_zTT_ps_spec/PeakAmp2","FRM_1/linAcc_zTT_ps_spec/PeakAmp3","FRM_1/linAcc_zTT_ps_spec/PeakFreq1","FRM_1/linAcc_zTT_ps_spec/PeakFreq2","FRM_1/linAcc_zTT_ps_spec/PeakFreq3","FRM_1/linAcc_zTT_ps_spec/BandPower","FRM_1/linAcc_zTT_sigstats/ClearanceFactor","FRM_1/linAcc_zTT_sigstats/CrestFactor","FRM_1/linAcc_zTT_sigstats/ImpulseFactor","FRM_1/linAcc_zTT_sigstats/Kurtosis","FRM_1/linAcc_zTT_sigstats/Mean","FRM_1/linAcc_zTT_sigstats/PeakValue","FRM_1/linAcc_zTT_sigstats/RMS","FRM_1/linAcc_zTT_sigstats/ShapeFactor","FRM_1/linAcc_zTT_sigstats/Skewness","FRM_1/linAcc_zTT_sigstats/Std"];
featureTable = readFeatureTable(outputEnsemble,"FRM_1",'Features',selectedFeatureNames,'ConditionVariables',outputEnsemble.ConditionVariables,'IncludeMemberID',true);

% Set SelectedVariables to select variables to read from the ensemble.
outputEnsemble.SelectedVariables = unique([outputEnsemble.DataVariables;outputEnsemble.ConditionVariables;outputEnsemble.IndependentVariables],'stable');

% Gather results into a table.
outputTable = readall(outputEnsemble);
end
